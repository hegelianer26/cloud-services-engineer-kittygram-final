name: Kitty workflow

on:
  push:
    branches:
      - main

jobs:
  # tests:
  #   # Разворачиваем окружение:
  #   runs-on: ubuntu-latest

  #   steps:
  #   # Копируем код проекта
  #   - name: Check out code
  #     uses: actions/checkout@v3
  #   # Устанавливаем Python с помощью action
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #   # В action setup-python@v4 передаём параметр — версию Python
  #     with:
  #       python-version: 3.12
  #   # Обновляем pip, устанавливаем flake8 и flake8-isort, 
  #   # устанавливаем зависимости проекта
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip 
  #       pip install flake8==6.0.0
  #       pip install pytest
  #       pip install -r backend/requirements.txt

  #   # Запускаем flake8
  #   - name: Test with flake8
  #     # Вызываем flake8 и указываем ему,
  #     # что нужно проверить файлы только в папке backend/
  #     run: python -m flake8 backend/ 

  #   # - name: Run tests with pytest
  #   #   run: python -m pytest

  # build_backend_and_push_to_docker_hub:
  #   name: Push backend Docker image to DockerHub
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v3
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to Docker 
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Push to DockerHub
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: ./backend/
  #         push: true
  #         tags: hegelianer/kittygram_backend:latest


  # build_forntend_and_push_to_docker_hub:
  #   name: Push frontend Docker image to DockerHub
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v3
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to Docker 
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Push to DockerHub
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: ./frontend/
  #         push: true
  #         tags: hegelianer/kittygram_frontend:latest 

  
  # build_gateway_and_push_to_docker_hub:
  #   name: Push gateway Docker image to DockerHub
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v3
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to Docker 
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Push to DockerHub
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: ./nginx/
  #         push: true
  #         # Тут вместо username должен быть ваш логин на Docker Hub
  #         tags: hegelianer/kittygram_gateway:latest 


  deploy:
    name: Deploy to Remote Server
    runs-on: ubuntu-latest
    # needs: [build_backend_and_push_to_docker_hub, build_forntend_and_push_to_docker_hub, build_gateway_and_push_to_docker_hub]

    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Create .env file
      run: echo "${{ secrets.DEPLOY_INFO }}" > .env

    - name: Copy .env file to server
      run: scp .env ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER_IP }}:~/kittygram/.env

    - name: Copy docker-compose.yml to server
      run: scp docker-compose.production ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER_IP }}:~/kittygram/docker-compose.yml

    - name: Deploy with Docker Compose
      run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER_IP }} 'cd ~/kittygram && docker-compose pull && docker-compose up -d'


  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой успешно выполнен! 
  